Data Visualization with D3:

D3 = Data Driven Documents which can be integrated with DOM of a website and then represent our data in visualized form

I'm gonna take down my notes from all units, subunits etc., and copy-paste my code that I write on the online IDE of FCC. 

Everything we write needs to be in the <script> tag in the body

## ADD DOCUMENT ELEMENTS WITH D3

D3 allows you to add or change elements in your document.
	
--> All these methods need to be accessed through the d3 object, just like you would use the alias or the module you import in python
as an object and then use the methods of that module with the dot operator after the module name/alias	
	Notable methods in the first challenge are:

		1. select(): Select method takes an argument of the element that you wanna select, and returns an HTML node 
		   Ex: const acr = d3.select("a") // This means that our d3 selects the first anchor tag (because you specified "a", and returns it)

		2. append(): What append() method does is it takes an argument that refers to an element and you would want to append that element
					 to another HTML node.

		3. text(): text() method just either generates the text that is already there for an element, or would replace the text to the 
				   element which we specify as an argument to this method

		4. selectAll(): does the same thing as select() and returns an array of all the elements that match the argument


## Work with Data in D3:

1. D3 focuses on data driven approach.
   When you have a set of data, you can use D3 methods to display that data on the page


first step, IS TO MAKE D3 AWARE OF THAT DATA
data() method is used on a selection of DOM elements to attach the data to those elements. Pass the dataset as an arg to that method.

A COMMON WORKFLOW PATTERN IS:
to create a new element in the document for each piece of data in the dataset.

enter() method for the purpose of the above.

What is basically happening in this case is that, we are mapping each element in the data set to an element in the page.

The way this works is that, we select an element, and map the dataset using the data(dataset) method.

and then if the elements that we have selected using the selectAll() element returns nothing (empty), it creates one for each!
If there are lesser elements that the data set elements, it creates the remaining empty elements


<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text("New Title");
  </script>
</body>

But this will only output "Next Text", 9 times because there are 9 elements in the list and you created an h2 for each one of them with the text "New Text"

But to be able to use the data in the dataset, you can use the text() method, which suprisingly can also be used to display the data and the way we do that is:

selection.text((d) => d)

ideally, you would want a string attached to the data elements, 

(d) is basically saying I WILL TAKE THE PLACE, and you tell me what I need to include in this place

So, if you want to say 12 USD, where 12 is one of your data set element, 

you do : selection.text((d) => (d + " USD"))


you can also add inline styling to the elemenst that you add using the style() method:

Syntax:

style("key", "value")

Ex:

style("color", "blue")
style("font-family", "Bahnschrift")


You can also use the call back function in the style as well:
Below is the code that displays values less than 20 as red and else as green

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text((d) => (d + " USD"))
      // Add your code below this line
      .style("color", (d) => {
          if (d < 20) {
            return("red")
          } else {
            return("green")
          }
      });


      // Add your code above this line
  </script>
</body>


As you may have already guessed, it is not a great idea to add inline styling to all elements, its a headache, its mundane blah blah blah, so
you would want to use a class to do that for you and so that you can reuse it and apply to other elements as well blah blah blah


so, to do that in html, we add "class = blah container", but here you do that using attr() method meaning you are adding an attribute to that element

in this case, we are adding a "class" attribute, you can add "id", "onsubmit" any attribute that the element can act upon, I guess

d3.attr("class", "container")

When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.


Below is code for adding a rectangle shape using the svg element
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h)
                  // Add your code below this line
                  .append("rect")
                  .attr("width", "25")
                  .attr("height", "100")
                  .attr("x", 0) 
                  .attr("y", 0)


                  // Add your code above this line
  </script>
</body>





